function deal() {
  $("#deal").is(":disabled") ||
    (validateBets(
      "#ante",
      "#bonus3",
      "#bonus3",
      $("#bonus").is(":checked") ? 1 : 0,
      3
    ) &&
      (resetGame(),
      (PLAYER.last_bets.bonus = $("#bonus").is(":checked") ? 1 : 0),
      UI.disableButton($("#deal")),
      $(".betting_circle input").attr("disabled", "disabled"),
      $(".bonus_circle").addClass("disabled"),
      $(".bonus_circle *").css("cursor", "default"),
      (GAME.net_wager =
        3 * PLAYER.last_bets.ante +
        PLAYER.last_bets.bonus +
        PLAYER.last_bets.bonus3),
      decrementBankroll(GAME.net_wager),
      dealPlayer(3, function () {
        setTimeout(evalPlayer, 10 * GAME.speed);
      })));
}

function let_it_ride() {
  $("#ride").is(":disabled") ||
    (UI.disableButton($(".secondary")),
    UI.hideAdvice(),
    0 === GAME.community.length
      ? ((GAME.raise1 = PLAYER.last_bets.ante),
        dealCommunity(1, function () {
          setTimeout(evalPlayer, 10 * GAME.speed);
        }))
      : ((GAME.raise2 = PLAYER.last_bets.ante),
        dealCommunity(1, function () {
          setTimeout(evalPlayer, 10 * GAME.speed);
        })));
}

function pull() {
  $("#pull").is(":disabled") ||
    (UI.disableButton($(".secondary")),
    UI.hideAdvice(),
    0 === GAME.community.length
      ? ((GAME.raise1 = 0),
        $(".raise1_circle>span,.raise1_circle>input").addClass("fade_out"))
      : ((GAME.raise2 = 0),
        $(".raise2_circle>span,.raise2_circle>input").addClass("fade_out")),
    (GAME.net_wager -= PLAYER.last_bets.ante),
    incrementBankroll(PLAYER.last_bets.ante),
    dealCommunity(1, function () {
      setTimeout(evalPlayer, 200 * GAME.speed);
    }));
}

function resetGame() {
  $(".card > .card_back").css("background-position", getImage(0)),
    isIE()
      ? ($(".hand_display>.front").show(), $(".hand_display>.back").empty())
      : $(".hand_display").removeClass("flipped"),
    $(".bonus_highlight").remove(),
    (GAME.player = []),
    (GAME.community = []),
    (GAME.player_combined = []),
    (GAME.raise2 = GAME.raise1 = 0),
    (GAME.net_win = GAME.net_wager = bonus3_val = 0);
}

function dealCommunity(e, a) {
  if (0 !== e) {
    var t = dealCard(GAME.community, GAME.player);
    GAME.community.push(t),
      showCard(
        GAME.community.length - 1,
        t,
        "community",
        1700 * GAME.speed,
        function () {
          dealCommunity(e - 1, a);
        }
      );
  } else a();
}

function dealPlayer(e, a) {
  if (0 !== e) {
    var t = dealCard(GAME.player, []);
    GAME.player.push(t),
      showCard(
        GAME.player.length - 1,
        t,
        "player",
        1700 * GAME.speed,
        function () {
          dealPlayer(e - 1, a);
        }
      );
  } else a();
}

function evalPlayer() {
  (GAME.unsorted_player = copy_array(GAME.player)),
    GAME.player.sort(card_sort_fn),
    GAME.community.sort(card_sort_fn),
    (GAME.player_combined = GAME.community.concat(GAME.player)),
    GAME.player_combined.sort(card_sort_fn),
    (GAME.player_val = eval_hand(GAME.player_combined)),
    setTimeout(function () {
      if (
        0 === GAME.community.length &&
        ((GAME.bonus3_net = payBonus3()), GAME.bonus3_net > 0)
      ) {
        var e = $("<span>", { class: "bonus_highlight" });
        $(
          ".bonus3_payout > .payline:eq(" +
            Math.max(0, 6 - GAME.bonus3_val) +
            ")"
        ).prepend(e),
          UI.flash(e, 500);
      }
      2 == GAME.community.length
        ? setTimeout(showResults, 500)
        : (UI.enableButton($("#ride,#pull")), showAdvice()),
        pre_hands[GAME.player_val] && GAME.player_combined.length < 5
          ? $("#your_hand_value>>.back").html(
              '<span class="pre_hand">' +
                GAME.player_combined.length +
                "-card</span> " +
                hand_names[GAME.player_val]
            )
          : $("#your_hand_value>>.back").html(hand_names[GAME.player_val]),
        isIE()
          ? $("#your_hand_value>>.front").hide()
          : $("#your_hand_value>.hand_display").addClass("flipped");
    }, 10);
}

function showAdvice() {
  if ($("#advice").is(":checked")) {
    var e = getAdvice(),
      a = $("<span>", { id: "best_play", class: "icon-best_play" }).text(
        "Best Play"
      );
    e > 0 ? $("#ride").append(a) : $("#pull").append(a),
      UI.fadeIn($("#best_play"), 100);
  }
}

function showResults() {
  var e = 0,
    a = 0,
    t = 0,
    n = 0,
    s = payoutMultiplier().multiplier;
  if (s > 0) {
    if (((GAME.result = "W"), GAME.player_val > 15)) {
      var i = $("<span>", { class: "bonus_highlight" });
      $(
        ".payout > .payline:eq(" + Math.min(8, 28 - GAME.player_val) + ")"
      ).prepend(i),
        UI.flash(i, 500);
    }
    (e += PLAYER.last_bets.ante + GAME.raise2 + GAME.raise1),
      (a = PLAYER.last_bets.ante * s),
      (t = GAME.raise2 * s),
      (n = GAME.raise1 * s),
      (GAME.net_win += a + t + n);
  } else
    (GAME.result = "L"),
      (a = -PLAYER.last_bets.ante),
      (t = -GAME.raise2),
      (n = -GAME.raise1);
  if (
    (GAME.player_val > 21 && play_sound("big_win"),
    (GAME.bonus_net = payBonus()),
    GAME.bonus_net > 0)
  ) {
    var r = $("<span>", { class: "bonus_highlight" });
    $(
      ".bonus_payout > .payline:eq(" + Math.max(0, 28 - GAME.player_val) + ")"
    ).prepend(r),
      UI.flash(r, 500),
      (e += PLAYER.last_bets.bonus),
      (GAME.net_win += GAME.bonus_net);
  }
  GAME.bonus3_net > 0 &&
    ((e += PLAYER.last_bets.bonus3), (GAME.net_win += GAME.bonus3_net)),
    "W" == GAME.result
      ? $("#result").html("YOU WIN!")
      : "L" == GAME.result && $("#result").html("You Lose"),
    0 === PLAYER.last_bets.bonus3
      ? $(".payout_item").eq(3).hide()
      : ($(".payout_item").eq(3).show(),
        $("#bonus3_payout").html(
          formatTotalAmount(
            GAME.bonus3_net > 0 ? GAME.bonus3_net : -PLAYER.last_bets.bonus3
          )
        )),
    0 === PLAYER.last_bets.bonus
      ? $(".payout_item").eq(4).hide()
      : ($(".payout_item").eq(4).show(),
        $("#bonus_payout").html(
          formatTotalAmount(
            GAME.bonus_net > 0 ? GAME.bonus_net : -PLAYER.last_bets.bonus
          )
        )),
    $("#ante_payout").html(formatTotalAmount(a)),
    $("#raise2_payout").html(formatTotalAmount(t)),
    $("#raise1_payout").html(formatTotalAmount(n)),
    incrementBankroll(GAME.net_win + e),
    (GAME.winnings = GAME.net_win + e - GAME.net_wager),
    $("#winnings").html(formatTotalAmount(GAME.winnings)),
    GAME.winnings < 0
      ? $("#winnings").removeClass().addClass("loss")
      : GAME.winnings > 0
      ? $("#winnings").prepend("+ ").removeClass().addClass("win")
      : $("#winnings").removeClass().addClass("draw"),
    GAME.dispatchEvent("game_result"),
    UI.enableButton($("#deal")),
    $(
      ".betting_circle input[type=number], .betting_circle input[type=checkbox]"
    ).removeAttr("disabled"),
    $(".betting_circle > span, .betting_circle > input").removeClass(
      "fade_out"
    ),
    $(".bonus_circle").removeClass("disabled"),
    $(".bonus_circle *").css("cursor", "");
}

function payoutMultiplier() {
  var e = -1;
  var m = "YOU LOSE !";
  switch (GAME.player_val) {
    case 28:
      e = _GCONF.RoyalFlush;
      m = "Win - Royal Flush!";
      break;
    case 27:
      e = _GCONF.StraightFlush;
      m = "Win - Straight Flush!";
      break;
    case 26:
      e = _GCONF.FourOfKind;
      m = "Win - Four of a Kind!";
      break;
    case 25:
      e = _GCONF.FullHouse;
      m = "Win - Full House!";
      break;
    case 24:
      e = _GCONF.Flush;
      m = "Win - Flush!";
      break;
    case 23:
      e = _GCONF.Straight;
      m = "Win - Straight!";
      break;
    case 22:
      e = _GCONF.ThreeOfKind;
      m = "Win - Three of a Kind!";
      break;
    case 21:
      e = _GCONF.TwoPair;
      m = "Win - Two Pair!";
      break;
    case 20:
    case 19:
    case 18:
    case 17:
    case 16:
      e = _GCONF.TensOrBetter;
      m = "Win - Tens or Better!";
  }
  return { multiplier: e, message: m };
}

function payBonus() {
  var e = PLAYER.last_bets.bonus,
    a = 0;
  switch (GAME.player_val) {
    case 28:
      a = 2e4 * e;
      break;
    case 27:
      a = 2e3 * e;
      break;
    case 26:
      a = 400 * e;
      break;
    case 25:
      a = 200 * e;
      break;
    case 24:
      a = 50 * e;
      break;
    case 23:
      a = 25 * e;
      break;
    case 22:
      a = 5 * e;
      break;
    default:
      a = -e;
  }
  return a;
}

function payBonus3() {
  var e = PLAYER.last_bets.bonus3;
  if (0 === e) return 0;
  var a = 0;
  switch (GAME.player_val) {
    case 28:
      (GAME.bonus3_val = 6), (a = 50 * e);
      break;
    case 27:
      (GAME.bonus3_val = 5), (a = 40 * e);
      break;
    case 22:
      (GAME.bonus3_val = 4), (a = 30 * e);
      break;
    case 23:
      (GAME.bonus3_val = 3), (a = 6 * e);
      break;
    case 24:
      (GAME.bonus3_val = 2), (a = 4 * e);
      break;
    case 20:
    case 19:
    case 18:
    case 17:
    case 16:
    case 15:
      (GAME.bonus3_val = 1), (a = 1 * e);
  }
  return a > 0 ? a : -e;
}

function getAdvice() {
  var e, a, t, n;
  if (3 == GAME.player_combined.length) {
    if (GAME.player_val > 15 && !pre_hands[GAME.player_val]) return 1;
    if (
      ((e = get_rank(GAME.player[0])),
      (a = get_rank(GAME.player[1])),
      (t = get_rank(GAME.player[2])),
      GAME.player_val > 26 && 2 != t)
    )
      return 2;
    if (GAME.player_val > 23 && t > 9) return 3;
    if (
      -1 == isPair(GAME.player) &&
      e - t == 3 &&
      -1 != isFlush(GAME.player) &&
      e > 9
    )
      return 4;
    if (
      -1 == isPair(GAME.player) &&
      e - t == 4 &&
      -1 != isFlush(GAME.player) &&
      a > 9
    )
      return 5;
  } else if (4 == GAME.player_combined.length) {
    if (GAME.player_val > 15 && !pre_hands[GAME.player_val]) return 1;
    if (
      ((e = get_rank(GAME.player_combined[0])),
      (a = get_rank(GAME.player_combined[1])),
      (t = get_rank(GAME.player_combined[2])),
      (n = get_rank(GAME.player_combined[3])),
      GAME.player_val > 23)
    )
      return 6;
    if (-1 == isPair(GAME.player_combined) && e - n == 3) return 7;
    if (-1 == isPair(GAME.player_combined) && e - n == 4 && n > 9) return 8;
  }
  return -1;
}

function eval_hand(e) {
  return isRoyalFlush(e) > 0
    ? 28
    : isStraightFlush(e) > 0
    ? 27
    : isFourOfKind(e) > 0
    ? 26
    : isFullHouse(e) > 0
    ? 25
    : isFlush(e) > 0
    ? 24
    : isStraight(e) > 0
    ? 23
    : isThreeOfKind(e) > 0
    ? 22
    : isTwoPair(e) > 0
    ? 21
    : isPair(e) > 9
    ? 6 + isPair(e)
    : isPair(e) > 0
    ? 15
    : highCard(e);
}

function isRoyalFlush(e) {
  return 14 == isStraightFlush(e) ? 1 : -1;
}

function isStraightFlush(e) {
  var a = isFlush(e),
    t = isStraight(e);
  return a > 0 && t > 0 ? t : -1;
}

function isFourOfKind(e) {
  return e.length < 4
    ? -1
    : get_rank(e[0]) == get_rank(e[3])
    ? get_rank(e[0])
    : get_rank(e[1]) == get_rank(e[4])
    ? get_rank(e[1])
    : -1;
}

function isFullHouse(e) {
  if (e.length < 5) return -1;
  var a = get_rank(e[0]),
    t = get_rank(e[1]),
    n = get_rank(e[2]),
    s = get_rank(e[3]),
    i = get_rank(e[4]);
  return a == n && s == i ? a : n == i && a == t ? n : -1;
}

function isFlush(e) {
  for (var a = get_suit(e[0]), t = 1; t < e.length; t++)
    if (a != get_suit(e[t])) return -1;
  return 1;
}

function isStraight(e) {
  var a = get_rank(e[0]),
    t = a,
    n = !1;
  14 == a && (n = !0);
  var s = 0;
  for (s = 1; s < e.length; s++) {
    if (n && 1 == s && get_rank(e[s]) == e.length) t = e.length;
    else if (a != get_rank(e[s]) + 1) return -1;
    a = get_rank(e[s]);
  }
  return t;
}

function isThreeOfKind(e) {
  return get_rank(e[0]) == get_rank(e[2])
    ? get_rank(e[0])
    : e.length > 3 && get_rank(e[1]) == get_rank(e[3])
    ? get_rank(e[1])
    : e.length > 4 && get_rank(e[2]) == get_rank(e[4])
    ? get_rank(e[2])
    : -1;
}

function isTwoPair(e) {
  if (e.length < 4) return -1;
  var a = get_rank(e[0]),
    t = get_rank(e[1]),
    n = get_rank(e[2]),
    s = get_rank(e[3]);
  if (a == t && n == s) return a;
  if (5 == e.length) {
    var i = get_rank(e[4]);
    if (a == t && s == i) return a;
    if (t == n && s == i) return t;
  }
  return -1;
}

function isPair(e) {
  for (var a = get_rank(e[0]), t = 1; t < e.length; t++) {
    if (a == get_rank(e[t])) return a;
    a = get_rank(e[t]);
  }
  return -1;
}

function highCard(e) {
  return get_rank(e[0]);
}

(CORE.domain = "let-it-ride-online.com"), (CORE.game = "LetItRide");
var LetItRide = {
  init: function () {
    (GAME.big_hands = ["Royal Flush", "Straight Flush", "4-of-a-Kind"]),
      (GAME.big_win_threshold = 26),
      (GAME.streak_threshold = 2),
      (GAME.game_achievement_threshold = 5e3),
      (GAME.streak_achievement_threshold = 10),
      (GAME.achievement_names = [
        "5K Hands Played",
        "10 Wins in a Row",
        "4-of-a-Kind",
        "Straight Flush",
        "Royal Flush",
      ]),
      GAME.addEventListener("player_updated", LetItRide.onPlayerUpdated),
      GAME.addEventListener("game_result", LetItRide.onGamePlayed),
      GAME.addEventListener("stats_updated", LetItRide.onStatsUpdated);
  },
  initPlayer: function () {
    PLAYER.last_bets = { ante: 25, bonus: 1, bonus3: 10 };
  },
  initUI: function () {
    $("#deal").click(function () {
      deal();
    }),
      $("#ride").click(function () {
        let_it_ride();
      }),
      $("#pull").click(function () {
        pull();
      }),
      $("#raise1").on("change keyup", function (e) {
        $("#raise2").val($(this).val()),
          $("#ante").val($(this).val()),
          UI.adjustBetInputSize($("#ante")),
          UI.adjustBetInputSize($("#raise2"));
      }),
      $("#raise2").on("change keyup", function (e) {
        $("#raise1").val($(this).val()),
          $("#ante").val($(this).val()),
          UI.adjustBetInputSize($("#ante")),
          UI.adjustBetInputSize($("#raise1"));
      }),
      $("#ante").on("change keyup", function (e) {
        $("#raise1").val($(this).val()),
          $("#raise2").val($(this).val()),
          UI.adjustBetInputSize($("#raise1")),
          UI.adjustBetInputSize($("#raise2"));
      }),
      $(".bonus_circle").on("click", function () {
        $(".bonus_circle").hasClass("disabled") ||
          $("#bonus").prop("checked", !$("#bonus").is(":checked"));
      }),
      GAME.onTotalGames(5, function () {
        $(".ad_unit").show(),
          "0.0.0.0" != location.hostname
            ? $("#game").attr("src", "game.html?user=new&game=0")
            : $(".ad_unit").css("background", "white");
      }),
      GAME.onTotalGames(5, function () {
        GAME.speed = 0.35;
      }),
      GAME.onTotalGames(500, function () {
        GAME.speed = 0.3;
      }),
      LetItRide.onPlayerUpdated(),
      LetItRide.onStatsUpdated(),
      $("#ante, #raise2, #raise1, #bonus, #bonus3").removeAttr("readonly");
  },
  onPlayerUpdated: function () {
    void 0 === PLAYER.last_bets && LetItRide.initPlayer(),
      $("#ante").val(PLAYER.last_bets.ante),
      $("#raise1").val(PLAYER.last_bets.ante),
      $("#raise2").val(PLAYER.last_bets.ante),
      $("#bonus3").val(PLAYER.last_bets.bonus3),
      $("#bonus").prop("checked", 1 == PLAYER.last_bets.bonus),
      UI.adjustBetInputSize($("#ante")),
      UI.adjustBetInputSize($("#bonus3"));
  },
  onGamePlayed: function () {
    (GAME.big_win_value = GAME.player_val),
      STATS.update(
        GAME.result,
        GAME.winnings,
        GAME.player_val,
        GAME.bonus_net,
        GAME.bonus3_net
      ),
      "0.0.0.0" != location.hostname &&
        (PLAYER.total_games % 10 == 0
          ? new_ad(!0)
          : PLAYER.total_games % 3 == 0 && new_ad(!1));
  },
  onStatsUpdated: function (e) {
    if (
      ($("#bankroll").html(formatTotalAmount(PLAYER.bank_roll)),
      $(".hand_count").text(formatTotalNumber(PLAYER.today.game_count)),
      "stats" == PLAYER.sidebar_display)
    )
      if ("achievements" == PLAYER.stats_display)
        $("#achievement_hands > .hands_played").text(
          formatTotalNumber(PLAYER.achievements.game_count)
        );
      else {
        var a = "lifetime" == PLAYER.stats_display,
          t = a ? PLAYER.lifetime : PLAYER.today;
        $("#stat_hands > .hands_played").text(formatTotalNumber(t.game_count)),
          $("#win_percent").text(STATS.getPercent(t.win_count, a)),
          $("#lose_percent").text(STATS.getPercent(t.loss_count, a)),
          $("#stat_winnings .stat_title").text(
            t.winnings < 0 ? "LOSSES" : "WINNINGS"
          ),
          $("#winning_stat").text(formatCompactNumber(t.winnings)),
          t.most_money == t.least_money
            ? ($("#most_money").text("---"), $("#least_money").text("---"))
            : (STATS_TRAY.updateStat(
                $("#most_money"),
                t.most_money,
                e && "update" == e.namespace
              ),
              STATS_TRAY.updateStat(
                $("#least_money"),
                t.least_money,
                e && "update" == e.namespace
              )),
          STATS_TRAY.updateStat(
            $("#bonus_winnings"),
            t.bonus[0].winnings,
            e && "update" == e.namespace
          ),
          STATS_TRAY.updateStat(
            $("#bonus3_winnings"),
            t.bonus[1].winnings,
            e && "update" == e.namespace
          ),
          $("#bonus_win_percent").text(STATS.getBonusPercent(0, a)),
          $("#bonus3_win_percent").text(STATS.getBonusPercent(1, a)),
          $("#longest_win_streak").text(t.best_win_streak),
          $("#best_hand").text(hand_names[t.best_hand_val]);
      }
    savePlayerData(!1);
  },
};
GAME.addEventListener("ready", LetItRide.init),
  GAME.addEventListener("player_created", LetItRide.initPlayer),
  GAME.addEventListener("player_loaded", LetItRide.initUI);
var hand_names = [
    "none",
    "none",
    "none",
    "3-High",
    "4-High",
    "5-High",
    "6-High",
    "7-High",
    "8-High",
    "9-High",
    "10-High",
    "Jack-High",
    "Queen-High",
    "King-High",
    "Ace-High",
    "Low-Pair",
    "Pair of Tens",
    "Pair of Jacks",
    "Pair of Queens",
    "Pair of Kings",
    "Pair of Aces",
    "Two-Pair",
    "3-of-a-Kind",
    "Straight",
    "Flush",
    "Full House",
    "4-of-a-Kind!",
    "Straight Flush!",
    "Royal Flush!!!",
  ],
  pre_hands = { 23: "1", 24: "1", 27: "1", 28: "1" };
(GAME.speed = 0.4),
  (GAME.folded = !1),
  (GAME.player = []),
  (GAME.community = []),
  (GAME.player_combined = []);
