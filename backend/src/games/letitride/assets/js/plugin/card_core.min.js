function savePlayerData(e, t, a) {
    if (GAME.private_table) a && a(); else {
        try {
            localStorage.setItem(CORE.game + ".player", JSON.stringify(PLAYER))
        } catch (e) {
        }
        t && saveCookie(CORE.game + ".id", PLAYER.id), e && SERVER.sync(!0, a)
    }
}

function decrementBankroll(e) {
    UI.setBankroll(PLAYER.bank_roll - e)
}

function incrementBankroll(e) {
    UI.setBankroll(PLAYER.bank_roll + e)
}

function trackTiming(e, t) {
    var a = (new Date).getTime() - SESSION.start_time;
    a < 1e5 && ga("send", "event", "timing", e, t ? t + "" : null, a, {nonInteraction: 1})
}

function trackEvent(e, t, a, n) {
    ga("send", "event", e, t + "", a + "", n, {nonInteraction: 1})
}

function loadWebSound() {
    try {
        var e = new XMLHttpRequest;
        if ((new Audio).canPlayType("audio/mpeg")) e.open("GET", "/assets/audio/sounds.mp3", !0); else {
            if (!(new Audio).canPlayType("audio/ogg")) return;
            e.open("GET", "/assets/audio/sounds.ogg", !0)
        }
        e.responseType = "arraybuffer", e.onload = function () {
            SOUND.context.decodeAudioData(e.response, function (e) {
                SOUND.buffer = e, SOUND.web_audio = !0, SOUND.ready = !0, $("#sound_setting").show(), $("#deal").one("click", function () {
                    playWebSound(0, .1, !0)
                })
            })
        }, e.send()
    } catch (e) {
        trackEvent("error", "audio_load", e.message || e.description)
    }
}

function playWebSound(e, t, a) {
    try {
        var n = SOUND.context.createBufferSource();
        n.buffer = SOUND.buffer;
        var i = SOUND.context.createGain ? SOUND.context.createGain() : SOUND.context.createGainNode();
        n.connect(i), i.connect(SOUND.context.destination), i.gain.value = a ? 0 : .85, n.start ? n.start(0, e, t) : n.noteGrainOn(0, e, t)
    } catch (e) {
        trackEvent("error", "audio", e.message || e.description)
    }
}

function play_sound(e) {
    $("#sound").is(":checked") && SOUND.ready && (SOUND.web_audio ? "deal" == e ? playWebSound(0, .175) : "win" == e ? playWebSound(1, .4) : "big_win" == e ? playWebSound(2, .9) : "reset" == e && playWebSound(3, .6) : $("#SoundBoard")[0] && "playSound" in $("#SoundBoard")[0] && $("#SoundBoard")[0].playSound(e))
}

function checkGeo(e) {
    if (PLAYER.location) {
        if ("player" == PLAYER.location_set_by) return void e();
        if (PLAYER.location_last_set_at && ("United States" != PLAYER.location && "an unknown location" != PLAYER.location || moment().diff(PLAYER.location_last_set_at, "days") < 5)) return void e()
    }
    getLocation(e)
}

function getLocation(e) {
    var t = !1, a = setTimeout(function () {
        trackEvent("geo_testing", "error_js_timeout", PLAYER.id), t = !0, e()
    }, 5e3);
    $.ajax({
        url: "https://geoip-js.com/js/apis/geoip2/v2.1/geoip2.js",
        cache: !0,
        dataType: "script",
        success: function () {
            t || (clearTimeout(a), geoip2 ? geoip2.city(function (t) {
                var a = parseCityCountry(t);
                PLAYER.location ? a == PLAYER.location ? trackEvent("geo_testing", "match", a) : trackEvent("geo_testing", "mis-match", a + " != " + PLAYER.location) : trackEvent("geo_testing", "new", a), PLAYER.location = a, PLAYER.location_last_set_at = (new Date).getTime(), PLAYER.location_set_by = "maxmind", savePlayerData(!1), GAME.dispatchEvent("player_updated.updateLocation"), e()
            }, function () {
                trackEvent("geo_testing", "error_geoip2_city", PLAYER.id), e()
            }, {w3cGeolocationDisabled: !0}) : (trackEvent("geo_testing", "error_no_geoip2", PLAYER.id), e()))
        },
        error: function () {
            t || (clearTimeout(a), trackEvent("geo_testing", "error_js_load", PLAYER.id), e())
        }
    })
}

function parseCityCountry(e) {
    var t = "an unknown location";
    return e.country && e.country.iso_code && e.country.names.en && ("US" != e.country.iso_code && "CA" != e.country.iso_code || !e.city.names.en ? t = e.country.names.en : (t = e.city.names.en, e.subdivisions.length > 0 && e.subdivisions[0].iso_code && (t += ", " + e.subdivisions[0].iso_code))), t
}

function saveCookie(e, t, a) {
    try {
        var n = new Date;
        n.setTime(n.getTime() + 24 * (a || 365) * 60 * 60 * 1e3);
        var i = "; expires=" + n.toGMTString();
        document.cookie = e + "=" + t + i + "; path=/; SameSite=None; Secure"
    } catch (e) {
    }
}

function readCookie(e) {
    try {
        for (var t = e + "=", a = document.cookie.split(";"), n = 0; n < a.length; n++) {
            for (var i = a[n]; " " == i.charAt(0);) i = i.substring(1, i.length);
            if (0 === i.indexOf(t)) return i.substring(t.length, i.length)
        }
    } catch (e) {
    }
    return null
}

function deleteCookie(e) {
    saveCookie(e, "", -1)
}

function formatCurrency(e) {
    var t = Math.floor(100 * e % 100);
    return 0 === t ? t = "00" : t < 10 && (t = "0" + t), formatTotalAmount(Math.floor(e)) + "." + t
}

function formatTotalAmount(e) {
    return e < 0 ? "- $" + formatTotalNumber(Math.abs(e)) : "$" + formatTotalNumber(e)
}

function formatTotalNumber(e) {
    if (e != parseInt(e, 10)) return e;
    for (var t = ""; e > 999;) {
        var a = (e % 1e3).toString();
        1 == a.length ? a = "00" + a : 2 == a.length && (a = "0" + a), t = "," + a + t, e = Math.floor(e / 1e3)
    }
    return t = e + t
}

function formatCompactNumber(e) {
    var t = Math.abs(e);
    if (t < 1e4) t = formatTotalNumber(t); else if (t < 1e5) {
        var a = Math.floor(t % 1e3 / 100);
        t = Math.floor(t / 1e3) + (a > 0 ? "." + a : "") + "K"
    } else if (t < 1e6) t = Math.floor(t / 1e3) + "K"; else if (t < 1e7) {
        var n = Math.floor(t % 1e6 / 1e5);
        t = Math.floor(t / 1e6) + (n > 0 ? "." + n : "") + "M"
    } else if (t < 1e9) t = Math.floor(t / 1e6) + "M"; else if (t < 1e10) {
        var i = Math.floor(t % 1e9 / 1e8);
        t = Math.floor(t / 1e9) + (i > 0 ? "." + i : "") + "B"
    } else t = Math.floor(t / 1e9) + "B";
    return (e < 0 ? "-$" : "$") + t
}

function parsePlayerInt(e, t) {
    return !e || isNaN(e) ? t || 0 : parseInt(e, 10)
}

function getQueryParameterByName(e) {
    var t = new RegExp("[\\?&]" + e + "=([^&#]*)").exec(location.search);
    return null === t ? "" : decodeURIComponent(t[1].replace(/\+/g, " "))
}

function isIE() {
    return navigator.userAgent.match(/Trident/gi) || navigator.userAgent.match(/MSIE/gi)
}

function isIE8() {
    return "visible" == $("input[type=checkbox]").css("visibility")
}

function isTouch() {
    return "ontouchstart" in window
}

function new_ad(e, t) {
    if (!PLAYER.adb_user) {
        var a = (e ? "game.html?topic=vegas&game=" : "game.html?game=") + SESSION.game_count;
        if (isIE()) {
            var n = $("#game").clone();
            n.src = a, $("#game").replaceWith(n)
        } else $("#game").attr("src", a)
    }
}

function validateBets(e, t, a, n, i) {
    return "" === $.trim($(e).val()) && $(e).val(0), "" === $.trim($(t).val()) && $(t).val(0), "" === $.trim($(a).val()) && $(a).val(0), $.isNumeric($(e).val()) && $.isNumeric($(t).val()) && $.isNumeric($(a).val()) ? (PLAYER.last_bets[$(e)[0].id] = parseInt($(e).val(), 10), e != t && (PLAYER.last_bets[$(t)[0].id] = parseInt($(t).val(), 10), PLAYER.last_bets[$(t)[0].id] < 0) ? (UI.warn("Bets cannot be less that $0"), !1) : t != a && (PLAYER.last_bets[$(a)[0].id] = parseInt($(a).val(), 10), PLAYER.last_bets[$(a)[0].id] < 0) ? (UI.warn("Bets cannot be less that $0"), !1) : void 0 === PLAYER.bank_roll || null === PLAYER.bank_roll || isNaN(PLAYER.bank_roll) ? (trackEvent("debug", "undefined_bank_roll", JSON.stringify(PLAYER)), localStorage.removeItem(CORE.game + ".player"), deleteCookie(CORE.game + ".id"), window.PLAYER = window.SESSION = null, window.end = function () {
    }, location.reload(!0), !1) : (void 0 !== PLAYER.last_bets.jackpot && (PLAYER.last_bets.jackpot = n), PLAYER.last_bets[$(e)[0].id] < 1 ? (UI.warn("Ante must be at least $1"), !1) : PLAYER.last_bets[$(e)[0].id] > 1e8 || PLAYER.last_bets[$(t)[0].id] > 1e8 || PLAYER.last_bets[$(a)[0].id] > 1e8 ? (UI.warn("Max bet is $100,000,000"), !1) : PLAYER.last_bets[$(e)[0].id] * i + PLAYER.last_bets[$(t)[0].id] + (t != a ? PLAYER.last_bets[$(a)[0].id] : 0) + n > PLAYER.bank_roll ? (GAME.private_table ? PRIVATE_TABLE.allow_rebuys ? UI.warn('Not Enough Money!<br>[ <a onclick="DIALOGS.resetMoney(); return false;" href="#">Rebuy In</a> ]') : ($("#sitting_out").prop("checked", "checked"), UI.toggleSittingOut(), UI.warn("Not Enough Money!<br>")) : UI.warn('Not Enough Money!<br>[ <a onclick="DIALOGS.resetMoney(); return false;" href="#">Reset Money</a> ]'), !1) : (UI.clearWarning(), !0))) : (UI.warn("Bets must be a number"), !1)
}

function showCard(e, t, a, n, i) {
    var o = ("player" == a ? "#p" : "dealer" == a ? "#d" : "#c") + e;
    $(o + ">.card_back").css("background-position", getImage(t)), !1 === GAME.folded && play_sound("deal"), setTimeout(function () {
        i()
    }, n)
}

function dealCard(e, t) {
    var a = generate_card();
    return cardIn(t, a) ? dealCard(e, t) : cardIn(e, a) ? dealCard(e, t) : a
}

function generate_card() {
    if (GAME.private_table) return 0 === GAME.cards_dealt ? (GAME.cards_dealt += 1, PRIVATE_TABLE.current_game.deck[2 * GAME.seat_position]) : 1 === GAME.cards_dealt ? (GAME.cards_dealt += 1, PRIVATE_TABLE.current_game.deck[2 * GAME.seat_position + 1]) : (GAME.cards_dealt += 1, PRIVATE_TABLE.current_game.deck[2 * GAME.num_seats + GAME.cards_dealt]);
    if (test_mode) {
        var e = test_hand[test_count];
        return test_count = (test_count + 1) % test_hand.length, e
    }
    return 100 * generate_suit() + generate_rank()
}

function generate_suit() {
    return Math.floor(4 * Math.random()) + 1
}

function generate_rank() {
    return Math.floor(13 * Math.random()) + 2
}

function cardIn(e, t) {
    var a = 0;
    for (a = 0; a < e.length; a++) if (e[a] == t) return !0;
    return !1
}

function generate_images(e) {
    var t = new Array(e.length), a = 0;
    for (a = 0; a < e.length; a++) t[a] = getImage(e[a]);
    return t
}

function card_sort_fn(e, t) {
    var a = get_rank(e), n = get_rank(t);
    return a < n ? 1 : a > n ? -1 : 0
}

function copy_array(e) {
    for (var t = new Array(e.length), a = 0; a < e.length; a++) t[a] = e[a];
    return t
}

function getImage(e) {
    return -80 * get_rank(e) + "px " + -106 * get_suit(e) + "px"
}

function get_suit(e) {
    return Math.floor(e / 100)
}

function get_rank(e) {
    return e % 100
}

function init() {
    GAME.addEventListener("ready", loadPlayer, -1), CONTROLLER.init();
    try {
        window.onbeforeunload = function () {
            end()
        }, $(window).unload(function () {
            end()
        })
    } catch (e) {
    }
}

function loadPlayer() {
    if ($.ajaxSetup({cache: !1}), $(document).ajaxError(function (e, t, a, n) {
        try {
            trackEvent("error", n, a.url)
        } catch (e) {
        }
    }), getQueryParameterByName("create_table")) DIALOGS.createPrivateTable(); else {
        if (!getQueryParameterByName("join_table")) return getQueryParameterByName("table_id") && getQueryParameterByName("seat_id") ? (GAME.private_table = !0, GAME.table_id = getQueryParameterByName("table_id"), GAME.seat_id = getQueryParameterByName("seat_id"), void SERVER.checkSeat(getQueryParameterByName("table_id"), getQueryParameterByName("seat_id"), function (e) {
            PRIVATE_TABLE = e, GAME.seat_position = PRIVATE_TABLE.seats[GAME.seat_id].table_position, GAME.num_seats = Object.keys(PRIVATE_TABLE.seats).length, SERVER.checkWebsocket();
            try {
                window.AudioContext = window.AudioContext || window.webkitAudioContext, SOUND.context = new AudioContext, loadWebSound()
            } catch (e) {
            }
            GAME.dispatchEvent("private_table_loaded")
        }, function () {
        })) : void (getQueryParameterByName("user_id") ? SERVER.getUser(getQueryParameterByName("user_id"), 1, function () {
            window.location.href = window.location.pathname
        }, function () {
            window.location.href = window.location.pathname
        }) : (localStorage && localStorage.getItem("player") && !localStorage.getItem(CORE.game + ".player") && (localStorage.setItem(CORE.game + ".player", localStorage.getItem("player")), localStorage.removeItem("player"), localStorage.removeItem("winners"), saveCookie(CORE.game + ".id", readCookie("id")), deleteCookie("id")), localStorage && localStorage.getItem(CORE.game + ".player") ? (void 0 === (PLAYER = JSON.parse(localStorage.getItem(CORE.game + ".player"))).id ? (trackEvent("debug", "undefined PLAYER", JSON.stringify(PLAYER)), generateNewId()) : "offline" == PLAYER.id || "new" == PLAYER.id ? generateNewId() : readCookie(CORE.game + ".id") && readCookie(CORE.game + ".id") != PLAYER.id && ("undefined" == readCookie(CORE.game + ".id") ? saveCookie(CORE.game + ".id", PLAYER.id) : trackEvent("debug", "cookie_id_does_not_match", readCookie(CORE.game + ".id") + " != " + PLAYER.id)), PLAYER.username ? (GAME.dispatchEvent("player_logged_in"), $.getJSON("//www.table-games-online.com/api-user?method=get-user&v2=1&game=" + CORE.game + "&id=" + PLAYER.id, function (e) {
            e.total_games > PLAYER.total_games && (trackEvent("debug", "load_logged_in_player", PLAYER.id), PLAYER = JSON.parse(e.player), savePlayerData(!1)), initGame()
        }).error(function () {
            initGame()
        })) : initGame()) : readCookie(CORE.game + ".id") && "undefined" != readCookie(CORE.game + ".id") && "offline" != readCookie(CORE.game + ".id") ? (localStorage ? trackEvent("debug", "cookie_no_localStorage", readCookie(CORE.game + ".id")) : trackEvent("debug", "cookie_localStorage_not_avail", readCookie(CORE.game + ".id")), PLAYER.id = "cookie_" + readCookie(CORE.game + ".id"), $.getJSON("//www.table-games-online.com/api-user?method=get-user&v2=1&game=" + CORE.game + "&id=" + readCookie(CORE.game + ".id"), function (e) {
            if ("error" == e.status) trackEvent("debug", "get_user_error", readCookie(CORE.game + ".id")), deleteCookie(CORE.game + ".id"), window.PLAYER = window.SESSION = null, window.location.reload(); else {
                if (void 0 === e.id) return trackEvent("debug", "undefined_get_user", JSON.stringify(e) + ", id=" + readCookie(CORE.game + ".id")), deleteCookie(CORE.game + ".id"), window.PLAYER = window.SESSION = null, void window.location.reload();
                PLAYER = JSON.parse(e.player), savePlayerData(!1), initGame()
            }
        }).error(function () {
            deleteCookie(CORE.game + ".id"), window.PLAYER = window.SESSION = null, window.location.reload()
        })) : ("undefined" == readCookie(CORE.game + ".id") && trackEvent("debug", "cookie_is_undefined", document.cookie), $.getJSON("//www.table-games-online.com/api-user?method=create-id&game=" + CORE.game, function (e) {
            PLAYER.id = e.id, GAME.dispatchEvent("player_created"), savePlayerData(!1, !0), initGame()
        }).error(function () {
            trackEvent("debug", "creating_offline_user", ""), PLAYER.id = "offline", GAME.dispatchEvent("player_created"), savePlayerData(!1), initGame()
        })), SESSION.doc_load_time = (new Date).getTime() - SESSION.start_time, trackTiming("page_load", SESSION.start_time + "_" + PLAYER.id)));
        DIALOGS.takeSeat(getQueryParameterByName("join_table"))
    }
}

function generateNewId() {
    $.ajax({
        url: "//www.table-games-online.com/api-user?method=create-id&game=" + CORE.game,
        cache: !1,
        success: function (e) {
            "error" != e.status && ("offline" == PLAYER.id ? trackEvent("debug", "id_generated_for_offline_user", e.id) : "new" == PLAYER.id && trackEvent("debug", "id_generated_for_new_user", e.id), PLAYER.id = e.id, savePlayerData(!0, !0))
        }
    })
}

function initGame() {
    SESSION.user_load_time = (new Date).getTime() - SESSION.start_time - SESSION.doc_load_time, GAME.dispatchEvent("player_loaded"), ga("set", "dimension1", 0 === PLAYER.total_games ? "new_user" : "returning_user"), trackTiming("user_load", SESSION.start_time + "_" + PLAYER.id);
    try {
        window.AudioContext = window.AudioContext || window.webkitAudioContext, SOUND.context = new AudioContext, loadWebSound()
    } catch (e) {
        $.ajax({
            url: "//ajax.googleapis.com/ajax/libs/swfobject/2.2/swfobject.js",
            cache: !0,
            dataType: "script",
            success: function () {
                swfobject.embedSWF("//www.card-cloud.com/swfs/SoundBoard.swf", "SoundBoard", "10", "10", "9.0.124", null, null, {
                    bgcolor: "#b9decf",
                    name: "SoundBoard",
                    wmode: "opaque",
                    allowScriptAccess: "always"
                })
            }
        })
    }
    try {
        var e = $('<div class="ad-div" style="position:absolute;height:1px;width:1px;"></div>');
        $(document.body).append(e), setTimeout(function () {
            e.is(":visible") ? PLAYER.adb_user && (trackEvent("debug", "user_disabled_adb", PLAYER.id), delete PLAYER.adb_user) : (PLAYER.adb_user = !0, trackEvent("debug", "adb_user", PLAYER.id)), e.remove()
        }, 500)
    } catch (e) {
    }
    if ($.ajax({
        url: "//cdnjs.cloudflare.com/ajax/libs/visibility.js/1.2.4/visibility.min.js",
        cache: !0,
        dataType: "script",
        success: function () {
            Visibility.every(12e4, function () {
                SERVER.pollRecentWinners("visibility")
            }), window.JACKPOT && (SERVER.pollJackpot(), Visibility.every(6e4, function () {
                SERVER.pollJackpot()
            }))
        }
    }), localStorage && localStorage.getItem(CORE.game + ".winners")) {
        var t = JSON.parse(localStorage.getItem(CORE.game + ".winners"));
        if (moment(t.retrieved_at).isAfter(moment().subtract(2, "minutes"))) return UI.setWinners(t.data), void UI.setOnlineCount(t.online_count || 1)
    }
    SERVER.pollRecentWinners("loader")
}

function firstDeal() {
    SESSION.first_deal_time = (new Date).getTime() - SESSION.start_time, trackTiming("first_deal", PLAYER.id), $(".deal > .icon-start_here").remove()
}

function firstPlay() {
    SESSION.first_play_time = (new Date).getTime() - SESSION.start_time, $(".button_bar button[id!=deal]").off("click.firstPlay", firstPlay), GAME.addEventListener("game_result.firstGame", firstGame, 0, !0), trackTiming("first_play", PLAYER.id)
}

function firstGame() {
    SESSION.sync_interval_id = setInterval(SERVER.sync, PLAYER.username ? 6e4 : 18e4), trackTiming("first_game", PLAYER.id), setTimeout(function () {
        GAME.addEventListener("game_result.secondGame", function () {
            trackTiming("second_game", PLAYER.id)
        }, 0, !0)
    }, 50)
}

function logout() {
    return $("#logout_link").css("color", "#00753b").text("Logging out..."), savePlayerData(!0, !1, function () {
        localStorage.removeItem(CORE.game + ".player"), deleteCookie(CORE.game + ".id"), window.PLAYER = window.SESSION = null, window.end = function () {
        }, location.reload(!0)
    }), !1
}

function end() {
    SESSION && (0 === SESSION.user_load_time ? trackTiming("left_no_load", PLAYER.id) : !0 !== SESSION.cashed_out && (SESSION.cashed_out = !0, saveCookie(CORE.game + ".id", PLAYER.id), 0 === SESSION.first_deal_time ? trackTiming("left_no_deal", PLAYER.id) : 0 === SESSION.first_play_time ? trackTiming("left_no_play", PLAYER.id) : 0 === SESSION.game_count ? trackTiming("left_no_games", PLAYER.id) : (SERVER.sync(), Math.abs(SESSION.winnings) > 1e7 ? trackEvent("cash_out_x", Math.ceil(SESSION.game_count / 10), PLAYER.id, SESSION.winnings) : trackEvent("cash_out", Math.ceil(SESSION.game_count / 10), PLAYER.id, SESSION.winnings)))), GAME.webSocket && GAME.webSocket.close()
}

var CORE = {VERSION: "3.2", CLOUD_URL: "https://www.card-cloud.com/", SERVICE_URL: "/services"}, GAME = {
    big_hands: ["", "", ""],
    big_win_threshold: 0,
    big_win_value: 0,
    big_winners: [0, 0, 0],
    streak_threshold: 0,
    streak_achievement_threshold: 10,
    game_achievement_threshold: 5e3
}, PLAYER = {
    id: "new",
    created_at: (new Date).getTime(),
    last_game_at: 0,
    days_played: 1,
    total_games: 0,
    total_withdrawn: 1e3,
    bank_roll: 1e3,
    advice_enabled: 0,
    sound_enabled: 0,
    sidebar_display: "payouts",
    stats_display: "today",
    today: {
        start_time: page_start_time,
        game_count: 0,
        win_count: 0,
        loss_count: 0,
        fold_count: 0,
        least_money: 1e3,
        most_money: 1e3,
        money_withdrawn: 0,
        winnings: 0,
        most_won: 0,
        best_hand_val: 0,
        best_win_streak: 0,
        bonus: [{count: 0, wins: 0, winnings: 0}, {count: 0, wins: 0, winnings: 0}]
    },
    lifetime: {
        start_time: page_start_time,
        game_count: 0,
        win_count: 0,
        loss_count: 0,
        fold_count: 0,
        least_money: 1e3,
        most_money: 1e3,
        money_withdrawn: 1e3,
        winnings: 0,
        most_won: 0,
        best_hand_val: 0,
        best_win_streak: 0,
        bonus: [{count: 0, wins: 0, winnings: 0}, {count: 0, wins: 0, winnings: 0}],
        best_session: 0,
        longest_session: 0,
        best_session_date: 0,
        longest_session_date: 0,
        best_hand_val_date: 0,
        best_win_streak_date: 0,
        most_won_date: 0
    },
    achievements: {start_time: page_start_time, game_count: 0, achieved: {}}
}, SESSION = {
    game_count: 0,
    money_reset_count: 0,
    stat_reset_count: 0,
    jackpot_entries: 0,
    current_streak: 0,
    last_games_sync: 0,
    sync_interval_id: 0,
    start_time: page_start_time,
    doc_load_time: 0,
    user_load_time: 0,
    first_deal_time: 0,
    first_play_time: 0,
    second_play_time: 0,
    winnings: 0,
    last_5: [],
    cashed_out: !1
}, SOUND = {ready: !1}, PRIVATE_TABLE = {
    table_id: 0,
    expires_at: 0,
    game: null,
    initial_buyin_amount: 1e3,
    games_played: 0,
    seats: {},
    current_game: {}
}, STATS = {
    update: function (e, t, a, n, i) {
        STATS.checkDailyRollover(), PLAYER.last_game_at = (new Date).getTime(), SESSION.game_count += 1, PLAYER.total_games += 1, PLAYER.today.game_count += 1, PLAYER.lifetime.game_count += 1, "W" == e ? (PLAYER.today.win_count += 1, PLAYER.lifetime.win_count += 1) : "L" == e ? (PLAYER.today.loss_count += 1, PLAYER.lifetime.loss_count += 1) : "F" == e && (PLAYER.today.fold_count += 1, PLAYER.lifetime.fold_count += 1), SESSION.winnings += t, PLAYER.today.winnings += t, PLAYER.lifetime.winnings += t, STATS._updateBonus(n, i), STATS._updateStreak(e), PLAYER.today.most_money = Math.max(PLAYER.today.most_money, PLAYER.bank_roll), PLAYER.today.least_money = Math.min(PLAYER.today.least_money, PLAYER.bank_roll), PLAYER.lifetime.most_money = Math.max(PLAYER.lifetime.most_money, PLAYER.bank_roll), PLAYER.lifetime.least_money = Math.min(PLAYER.lifetime.least_money, PLAYER.bank_roll), PLAYER.today.most_won = Math.max(PLAYER.today.most_won, t), PLAYER.today.best_hand_val = Math.max(PLAYER.today.best_hand_val, a), PLAYER.today.best_win_streak = Math.max(PLAYER.today.best_win_streak, SESSION.current_streak), STATS._updateBest("most_won", t), STATS._updateBest("best_hand_val", a), STATS._updateBest("best_win_streak", SESSION.current_streak), STATS._updateBest("best_session", PLAYER.today.winnings), STATS._updateBest("longest_session", PLAYER.today.game_count), STATS._updateAchievements(), SESSION.last_5.unshift({
            val: a,
            result: e,
            won: t
        }) > 5 && SESSION.last_5.pop(), GAME.dispatchEvent("stats_updated.update")
    }, _updateBonus: function (e, t) {
        void 0 !== e && 0 !== e && (PLAYER.today.bonus[0].count += 1, PLAYER.lifetime.bonus[0].count += 1, PLAYER.today.bonus[0].winnings += e, PLAYER.lifetime.bonus[0].winnings += e, e > 0 && (PLAYER.today.bonus[0].wins += 1, PLAYER.lifetime.bonus[0].wins += 1)), void 0 !== t && 0 !== t && (PLAYER.today.bonus[1].count += 1, PLAYER.lifetime.bonus[1].count += 1, PLAYER.today.bonus[1].winnings += t, PLAYER.lifetime.bonus[1].winnings += t, t > 0 && (PLAYER.today.bonus[1].wins += 1, PLAYER.lifetime.bonus[1].wins += 1))
    }, _updateStreak: function (e) {
        "W" == e ? (SESSION.current_streak < 0 && (SESSION.current_streak = 0), SESSION.current_streak += 1, GAME.streak_threshold && SESSION.current_streak >= GAME.streak_threshold && GAME.dispatchEvent("win_streak", SESSION.current_streak)) : "D" != e && (SESSION.current_streak > 0 && (SESSION.current_streak = 0), SESSION.current_streak -= 1, Math.abs(SESSION.current_streak) > 12 - GAME.streak_threshold && trackEvent("losing_streak", Math.abs(SESSION.current_streak), PLAYER.id))
    }, _updateBest: function (e, t) {
        t >= PLAYER.lifetime[e] && (PLAYER.lifetime[e] = t, PLAYER.lifetime[e + "_date"] = (new Date).getTime())
    }, _updateAchievements: function () {
        PLAYER.achievements.game_count += 1, PLAYER.achievements.game_count >= GAME.game_achievement_threshold && !PLAYER.achievements.achieved[GAME.achievement_names[0]] && STATS._addAchievement(GAME.achievement_names[0], PLAYER.achievements.game_count), SESSION.current_streak == GAME.streak_achievement_threshold && STATS._addAchievement(GAME.achievement_names[1], PLAYER.achievements.game_count), GAME.big_win_value == GAME.big_win_threshold && STATS._addAchievement(GAME.achievement_names[2], PLAYER.achievements.game_count), GAME.big_win_value == GAME.big_win_threshold + 1 && STATS._addAchievement(GAME.achievement_names[3], PLAYER.achievements.game_count), GAME.big_win_value == GAME.big_win_threshold + 2 && STATS._addAchievement(GAME.achievement_names[4], PLAYER.achievements.game_count)
    }, _addAchievement: function (e, t) {
        PLAYER.achievements.achieved[e] ? PLAYER.achievements.achieved[e].count += 1 : PLAYER.achievements.achieved[e] = {
            reached_in: t,
            on: (new Date).getTime(),
            count: 1
        }, trackEvent("achievement_reached", e, PLAYER.id, t), GAME.dispatchEvent("stats_updated.achievement_reached", e)
    }, getPercent: function (e, t) {
        var a = t ? PLAYER.lifetime.win_count + PLAYER.lifetime.loss_count + PLAYER.lifetime.fold_count : PLAYER.today.win_count + PLAYER.today.loss_count + PLAYER.today.fold_count;
        return 0 === a ? "0%" : Math.round(e / a * 100) + "%"
    }, getBonusPercent: function (e, t) {
        var a = t ? PLAYER.lifetime.bonus[e].wins : PLAYER.today.bonus[e].wins,
            n = t ? PLAYER.lifetime.bonus[e].count : PLAYER.today.bonus[e].count;
        return 0 === n ? "0%" : Math.round(a / n * 100) + "%"
    }, checkDailyRollover: function () {
        moment(PLAYER.today.start_time).endOf("day").isBefore(moment()) && PLAYER.last_game_at && moment(PLAYER.last_game_at).isBefore(moment().subtract(1, "hours")) && (PLAYER.days_played += 1, STATS.resetToday())
    }, resetToday: function () {
        PLAYER.today.start_time = (new Date).getTime(), PLAYER.today.game_count = PLAYER.today.win_count = PLAYER.today.loss_count = PLAYER.today.fold_count = 0, PLAYER.today.money_withdrawn = PLAYER.today.most_won = PLAYER.today.winnings = 0, PLAYER.today.best_hand_val = PLAYER.today.best_win_streak = 0, PLAYER.today.most_money = PLAYER.today.least_money = PLAYER.bank_roll, PLAYER.today.bonus = [{
            count: 0,
            wins: 0,
            winnings: 0
        }, {count: 0, wins: 0, winnings: 0}], SESSION.last_5 = [], GAME.dispatchEvent("stats_updated.resetToday")
    }, resetLifetime: function () {
        PLAYER.lifetime.start_time = (new Date).getTime(), PLAYER.lifetime.game_count = PLAYER.lifetime.win_count = PLAYER.lifetime.loss_count = PLAYER.lifetime.fold_count = 0, PLAYER.lifetime.most_won = PLAYER.lifetime.winnings = 0, PLAYER.lifetime.best_hand_val = PLAYER.lifetime.best_win_streak = 0, PLAYER.lifetime.most_money = PLAYER.lifetime.least_money = PLAYER.bank_roll, PLAYER.lifetime.bonus = [{
            count: 0,
            wins: 0,
            winnings: 0
        }, {
            count: 0,
            wins: 0,
            winnings: 0
        }], PLAYER.lifetime.best_session = PLAYER.lifetime.longest_session = 0, PLAYER.lifetime.best_session_date = PLAYER.lifetime.longest_session_date = 0, PLAYER.lifetime.best_hand_val_date = PLAYER.lifetime.best_win_streak_date = PLAYER.lifetime.most_won_date = 0, GAME.dispatchEvent("stats_updated.resetLifetime")
    }, resetAchievements: function () {
        PLAYER.achievements = {
            start_time: (new Date).getTime(),
            game_count: 0,
            achieved: {}
        }, GAME.dispatchEvent("stats_updated.resetAchievements")
    }
};
GAME._listeners = {}, GAME.addEventListener = function (e, t, a, n) {
    var i = e.split(".")[0], o = e.split(".")[1] || "", s = GAME._listeners[i] || [];
    void 0 === a && (a = 0);
    for (var r = {
        namespace: o,
        listener: t,
        priority: a,
        fireOnce: void 0 !== n && n
    }, l = !1, c = 0; c < s.length; c++) if (a > s[c].priority) {
        s.splice(c, 0, r), l = !0;
        break
    }
    l || s.push(r), GAME._listeners[i] = s
}, GAME.removeEventListener = function (e, t) {
    var a = e.split(".")[0], n = e.split(".")[1] || "", i = GAME._listeners[a];
    if (i instanceof Array) if (n || void 0 !== t) for (var o = 0; o < i.length; o++) n == i[o].namespace && (void 0 === t ? i.splice(o--, 1) : t === i[o].listener && i.splice(o--, 1)); else delete GAME._listeners[a]
}, GAME.dispatchEvent = function (e, t) {
    var a = e.split(".")[0], n = e.split(".")[1], i = GAME._listeners[a];
    if (i instanceof Array) {
        for (var o = !1, s = {
            stopPropagation: function () {
                o = !0
            }, namespace: n, data: t
        }, r = 0; r < i.length && !o; r++) n ? n != i[r].namespace && i[r].namespace || i[r].listener(s) : i[r].listener(s), i[r].fired = !0;
        GAME._listeners[a] = $.grep(i, function (e, t) {
            return !i[t].fireOnce || !i[t].fired
        })
    }
}, GAME.onTotalGames = function (e, t) {
    GAME.removeEventListener("game_result." + e), PLAYER.total_games >= e ? t() : GAME.addEventListener("game_result." + e, function () {
        PLAYER.total_games == e && (GAME.removeEventListener("game_result." + e), t())
    })
};
var UI = {
        sidebar_display: "payouts", stats_display: "today", disableButton: function (e) {
            e.attr("disabled", "disabled")
        }, enableButton: function (e) {
            e.removeAttr("disabled"), e.addClass("enable"), setTimeout(function () {
                e.removeClass("enable")
            }, 500)
        }, fadeIn: function (e, t) {
            setTimeout(function () {
                e.addClass("fade_in")
            }, t)
        }, fadeOut: function (e, t, a, n, i) {
            setTimeout(function () {
                e.removeClass("fade_in").addClass("fade_out")
            }, t), setTimeout(function () {
                e.removeClass("fade_out"), a && UI.removeElement(e), i && i()
            }, n || t + 300)
        }, flash: function (e, t) {
            e.removeClass("flash"), setTimeout(function () {
                e.addClass("flash")
            }, t)
        }, removeElement: function (e, t, a) {
            setTimeout(function () {
                e.remove(), a && a()
            }, t)
        }, setBankroll: function (e) {
            PLAYER.bank_roll = e, $("#bankroll").text(formatTotalAmount(PLAYER.bank_roll))
        }, incrementJackpot: function () {
            if (moment().diff(JACKPOT.last_sync, "seconds") > 60) return clearInterval(JACKPOT.jackpot_time_id), void (JACKPOT.jackpot_time_id = 0);
            JACKPOT.total += JACKPOT.rate_per_sec, $("#jackpot_meter").text(formatCurrency(JACKPOT.total))
        }, setOnlineCount: function (e) {
            e <= 1 ? $(".online_count").hide() : $(".online_count").text("Players Online: " + e).show()
        }, setWinners: function (e) {
            for (var t = 0; t < e.length; t++) {
                var a = e[t], n = $.inArray(a.type, GAME.big_hands);
                0 === GAME.big_winners[n] ? UI.newWinner(n, a) : GAME.big_winners[n] != a.user_id ? ($(".big_wins > .row").eq(n).css("opacity", 0), UI.newWinner(n, a, 2100)) : $(".big_wins > .row").eq(n).children(".hand").children().text(moment(a.last_win_at).fromNow())
            }
            $(".big_wins").removeClass("loading")
        }, newWinner: function (e, t, a) {
            if (a) setTimeout(function () {
                UI.newWinner(e, t)
            }, a); else {
                if (GAME.big_winners[e] == CORE.game + "_" + PLAYER.id && ($(".big_wins > .row").eq(e).children(".icon-thats_you").remove(), $(".big_wins > .row").eq(e).css("background", "")), GAME.big_winners[e] = t.user_id, t.user_id == CORE.game + "_" + PLAYER.id) {
                    var n = $("<div>", {class: "icon-thats_you"});
                    $(".big_wins > .row").eq(e).append(n), n.hide().delay(500).fadeIn(2e3), t.location = PLAYER.location, $(".big_wins > .row").eq(e).css("background", "#f8e678")
                }
                $(".big_wins > .row").eq(e).children(".location").text(t.location), $(".big_wins > .row").eq(e).children(".winnings").text(formatTotalAmount(t.take)), $(".big_wins > .row").eq(e).children(".hand").children().text(moment(t.last_win_at).fromNow()), $(".big_wins > .row").eq(e).css("opacity", 1)
            }
        }, warn: function (e) {
            $(".game_info > div").css("visibility", "hidden"), $("#info").html(e).removeClass("fade_in"), UI.fadeIn($("#info"), 0)
        }, clearWarning: function () {
            $("#info").empty(), $(".game_info > div").css("visibility", "")
        }, toggleSittingOut: function () {
            $("#sitting_out").is(":checked") ? (UI.disableButton($("#deal")), $("#seat" + (GAME.seat_position + 1) + " .card").hide(), $("#waiting_game").text("sitting out"), SERVER.setSeatStatus("sitting_out")) : (UI.enableButton($("#deal")), $("#seat" + (GAME.seat_position + 1) + " .card").show(), $("#waiting_game").text(""), SERVER.setSeatStatus("waiting_to_deal"))
        }, toggleSound: function () {
            trackEvent("toggle_sound", $("#sound").is(":checked") ? "on" : "off", PLAYER.id), PLAYER.sound_enabled = $("#sound").is(":checked") ? 1 : 0, savePlayerData(!1)
        }, toggleAdvice: function () {
            trackEvent("toggle_advice", $("#advice").is(":checked") ? "on" : "off", PLAYER.id), $("#advice").is(":checked") ? showAdvice() : UI.hideAdvice(), PLAYER.advice_enabled = $("#advice").is(":checked") ? 1 : 0, savePlayerData(!1)
        }, hideAdvice: function () {
            UI.fadeOut($("#best_play"), 200, !0, 500)
        }, adjustBetInputSize: function (e) {
            e.css("width", Math.max(0, 13 * (e.val().length - 3)) + 50)
        }
    },
    ranks = ["Card", "blank", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine", "Ten", "Jack", "Queen", "King", "Ace"],
    suits = ["BackRed", "Clubs", "Diamonds", "Hearts", "Spades"], test_mode = !1, test_hand = [310, 110, 210, 202, 402],
    test_count = 0, STATS_TRAY = {
        init: function () {
            $("#more_stats").click(function () {
                trackEvent("stats_tray", "more_stats", PLAYER.id), STATS_TRAY.setSidebarDisplay("stats")
            }), $(".stats_tray > .close").click(function () {
                trackEvent("stats_tray", "payouts", PLAYER.id), STATS_TRAY.setSidebarDisplay("payouts")
            }), $("#achievements_tab").click(function () {
                trackEvent("stats_tray", "achievements", PLAYER.id), GAME.private_table ? STATS_TRAY.setStatsDisplay("private_table_players") : STATS_TRAY.setStatsDisplay("achievements")
            }), $("#stats_tab").click(function () {
                trackEvent("stats_tray", "stats", PLAYER.id), STATS_TRAY.setStatsDisplay($(".today").hasClass("selected") ? "today" : "lifetime")
            }), $(".toggle").click(function () {
                STATS_TRAY.toggleStats()
            }), $(".toggle_label").click(function () {
                $(this).hasClass("selected") || (STATS_TRAY.toggleStats(), trackEvent("stats_tray", $(".today").hasClass("selected") ? "today" : "lifetime", PLAYER.id))
            }), GAME.addEventListener("stats_updated.achievement_reached", STATS_TRAY.showAchievements), GAME.addEventListener("stats_updated.resetAchievements", STATS_TRAY.clearAchievements)
        }, setSidebarDisplay: function (e) {
            e && e != UI.sidebar_display && ($("#more_stats, .stats_tray, .bonus_payouts").toggleClass("tray_out"), UI.sidebar_display = PLAYER.sidebar_display = e, GAME.dispatchEvent("stats_updated.display"))
        }, setStatsDisplay: function (e) {
            e && e != UI.stats_display && ("private_table_players" == e ? ($("#achievements_tab").attr("disabled", "disabled"), $("#stats_tab").removeAttr("disabled"), $(".stats_tray > .arrow").removeClass("stats").addClass("achievements"), $("#private_table_players, #stats").toggleClass("hidden"), setTimeout(function () {
                $("#stats").css("display", "none"), $("#private_table_players").css("display", "block")
            }, 100)) : "achievements" == e ? ($("#achievements_tab").attr("disabled", "disabled"), $("#stats_tab").removeAttr("disabled"), $(".stats_tray > .arrow").removeClass("stats").addClass("achievements"), $("#achievements, #stats").toggleClass("hidden"), setTimeout(function () {
                $("#stats").css("display", "none"), $("#achievements").css("display", "block")
            }, 100)) : "achievements" == UI.stats_display || "private_table_players" == UI.stats_display ? ($("#stats_tab").attr("disabled", "disabled"), $("#achievements_tab").removeAttr("disabled"), $(".stats_tray > .arrow").removeClass("achievements").addClass("stats"), $("#achievements, #stats, #private_table_players").toggleClass("hidden"), setTimeout(function () {
                $("#achievements, #private_table_players").css("display", "none"), $("#stats").css("display", "block")
            }, 100)) : STATS_TRAY.toggleStats(), UI.stats_display = PLAYER.stats_display = e, GAME.dispatchEvent("stats_updated.display"))
        }, toggleStats: function () {
            $(".toggle_btn").toggleClass("toggled"), $(".today, .lifetime").toggleClass("selected"), $(".today").hasClass("selected") ? ($("#reset_stats").text("Reset Today's Stats"), PLAYER.stats_display = "today") : ($("#reset_stats").text("Reset Lifetime Stats"), PLAYER.stats_display = "lifetime"), GAME.dispatchEvent("stats_updated.display")
        }, updateStat: function (e, t, a) {
            var n = e.data("value");
            a && void 0 !== n && (t > n ? e.addClass("win") : t < n && e.addClass("loss"), setTimeout(function () {
                e.removeClass()
            }, 1250)), e.text(formatCompactNumber(t)), e.data("value", t)
        }, showAchievements: function () {
            $(".achievement_name").each(function (e) {
                var t = $(this).text(), a = PLAYER.achievements.achieved[t];
                a && ($(".achievement").eq(e).children().addClass("achieved"), $(".achievement").eq(e).children(".achieved_in").text("ACHIEVED IN: " + formatTotalNumber(a.reached_in) + " HANDS"))
            })
        }, clearAchievements: function () {
            $(".achievement").children().removeClass("achieved")
        }
    }, DIALOGS = {
        _currentDialog: null, init: function () {
            $("#reset_stats").click(function () {
                "today" == PLAYER.stats_display ? DIALOGS.confirmReset("your stats for <font>today</font>", STATS.resetToday) : DIALOGS.confirmReset("your <font>lifetime</font> stats", STATS.resetLifetime)
            }), $("#reset_achievements").click(function () {
                DIALOGS.confirmReset("your <font>achievements</font>", STATS.resetAchievements)
            }), $("#deal").click(DIALOGS.hidePayouts), $("#reset_money").click(function () {
                "new" != PLAYER.id && 0 !== SESSION.user_load_time || trackEvent("debug", "new_user_money_reset", JSON.stringify(SESSION)), DIALOGS.resetMoney()
            }), $("#update_location").click(function () {
                DIALOGS.updateLocation()
            }), $("#signup_link").click(function () {
                return DIALOGS.userMgmt("signup"), !1
            }), $("#login_link").click(function () {
                return DIALOGS.userMgmt("login"), !1
            }), $("#forgot_password").click(function () {
                return trackEvent("forgot", "click", PLAYER.id), $(".user_mgmt > p").html("FORGOT"), $(".login").hide(), $(".forgot").show(), DIALOGS.userMgmtError(""), $("#forgot_username").focus(), !1
            }), $("#or_login").click(function () {
                return trackEvent("login", "click", PLAYER.id), $(".user_mgmt > p").html("LOGIN"), $(".signup").hide(), $(".login").show(), DIALOGS.userMgmtError(""), $("#login_username").focus(), !1
            }), $("#feedback_link").click(function () {
                return DIALOGS.feedback(), !1
            });
            try {
                $(".dialog:not(.payout_dialog,.create_table,.take_seat)").append($("<a>", {
                    href: "#",
                    class: "cancel"
                }).text("Cancel"))
            } catch (e) {
            }
            $(".cancel").click(function () {
                return DIALOGS.hide(), !1
            }), $(".money_reset button").click(function () {
                var e = parseInt($(this).val(), 10);
                if (GAME.private_table) return SERVER.reBuy(e), void DIALOGS.hide();
                SESSION.money_reset_count += 1;
                var t = e - PLAYER.bank_roll;
                PLAYER.bank_roll = e, trackEvent("reset_money", "set", PLAYER.bank_roll, SESSION.money_reset_count), !1 !== PLAYER.today.money_withdrawn && (PLAYER.today.money_withdrawn += t), PLAYER.lifetime.money_withdrawn += t, PLAYER.total_withdrawn += t, savePlayerData(!0), play_sound("reset"), GAME.dispatchEvent("stats_updated.resetMoney"), UI.clearWarning(), DIALOGS.hide()
            }), $(".money_reset > .icon-x").click(function () {
                PLAYER.today.money_withdrawn = !1, $(".money_reset").removeClass("with_withdrawn"), $(".total_withdrawn").empty(), trackEvent("hide_total_withdrawn", "click", PLAYER.id)
            })
        }, payouts: function () {
            SESSION.current_streak >= GAME.streak_threshold && ($(".payout_dialog").addClass("with_streak"), $(".win_streak").show().text(SESSION.current_streak + " Wins in a Row!")), $(".payout_dialog").addClass("show"), setTimeout(function () {
                $(".payout_dialog").css("opacity", .925)
            }, 100);
            try {
                isTouch() ? (PLAYER.pX && PLAYER.pY && $(".payout_dialog").css({
                    top: PLAYER.pY,
                    left: PLAYER.pX
                }), $(document).on("touchstart.hidePayouts", function (e) {
                    if ($(".payout_dialog")[0] == e.target || $.contains($(".payout_dialog")[0], e.target)) {
                        var t = $(".payout_dialog").position(), a = e.originalEvent.touches[0].pageX,
                            n = e.originalEvent.touches[0].pageY;
                        $(document).on("touchmove", function (e) {
                            $(".payout_dialog").css({
                                top: t.top + (e.originalEvent.touches[0].pageY - n),
                                left: t.left + (e.originalEvent.touches[0].pageX - a)
                            })
                        }), $(document).on("touchend", function (e) {
                            $(document).off("touchmove"), $(document).off("touchend"), a != e.originalEvent.changedTouches[0].pageX && n != e.originalEvent.changedTouches[0].pageY && (PLAYER.pX = $(".payout_dialog").position().left, PLAYER.pY = $(".payout_dialog").position().top, trackEvent("payout_dialog_touchmoved", PLAYER.pX + "," + PLAYER.pY, PLAYER.id))
                        })
                    } else $(document).off("touchstart.hidePayouts"), DIALOGS.hidePayouts()
                })) : (PLAYER.pX && PLAYER.pY && $(".payout_dialog").css({
                    top: PLAYER.pY,
                    left: PLAYER.pX
                }), $(document).on("mousedown.hidePayouts", function (e) {
                    if ($(".payout_dialog")[0] == e.target || $.contains($(".payout_dialog")[0], e.target)) {
                        var t = $(".payout_dialog").position(), a = e.pageX, n = e.pageY;
                        $(document).on("mousemove", function (e) {
                            $(".payout_dialog").css({top: t.top + (e.pageY - n), left: t.left + (e.pageX - a)})
                        }), $(document).on("mouseup", function (e) {
                            $(document).off("mousemove"), $(document).off("mouseup"), a != e.pageX && n != e.pageY && (PLAYER.pX = $(".payout_dialog").position().left, PLAYER.pY = $(".payout_dialog").position().top, trackEvent("payout_dialog_moved", PLAYER.pX + "," + PLAYER.pY, PLAYER.id))
                        })
                    } else $(document).off("mousedown.hidePayouts"), DIALOGS.hidePayouts()
                }))
            } catch (e) {
                DIALOGS.hidePayouts()
            }
        }, hidePayouts: function () {
            $(document).off(isTouch() ? "touchstart.hidePayouts" : "mousedown.hidePayouts"), $(".payout_dialog").css("opacity", 0).removeClass("show with_streak"), $(".win_streak").hide()
        }, resetMoney: function () {
            trackEvent("reset_money", "click", PLAYER.id), $(".money_reset > p").html("RESET MONEY"), !1 !== PLAYER.today.money_withdrawn && 0 !== PLAYER.today.money_withdrawn && ($(".money_reset").addClass("with_withdrawn"), $(".total_withdrawn").text("Total withdrawn today: " + formatTotalAmount(PLAYER.today.money_withdrawn))), DIALOGS.showBlocker($(".money_reset"))
        }, confirmReset: function (e, t) {
            trackEvent("reset_stats", "click", PLAYER.id), $(".confirm_reset > div").html("Are you sure you want to reset " + e + "?"), $("#reset").one("click", function () {
                SESSION.stat_reset_count += 1, trackEvent("reset_stats", "set", e), t(), DIALOGS.hide()
            }), DIALOGS.showBlocker($(".confirm_reset"))
        }, updateLocation: function () {
            trackEvent("update_location", "click", PLAYER.id), $(".update_location button").one("click", function () {
                UI.disableButton($(".update_location button")), $.getJSON("//www.table-games-online.com/api-lookup-zip?zip=" + $("#zip").val(), function (e) {
                    UI.enableButton($(".update_location button")), trackEvent("update_location", "set", PLAYER.location + " => " + e.city + ", " + e.state_short), PLAYER.location = e.city + ", " + e.state_short, PLAYER.location_set_by = "player", GAME.dispatchEvent("player_updated.updateLocation"), SERVER.pollRecentWinners("updateLocation"), DIALOGS.hide()
                })
            }), DIALOGS.showBlocker($(".update_location"))
        }, userMgmt: function (e) {
            trackEvent(e, "click", PLAYER.id), $(".user_mgmt > p").html("signup" == e ? "SIGN UP" : "LOGIN"), $(".user_mgmt > span").hide(), $("." + e).show(), DIALOGS.userMgmtError(""), $(".user_mgmt input").val(""), $(".signup button").on("click", function () {
                if ($("#signup_username").val().length < 4) DIALOGS.userMgmtError("Username must be at least 4 chars."); else if ($("#signup_password").val().length < 6) DIALOGS.userMgmtError("Password must be at least 6 chars."); else {
                    UI.disableButton($(this));
                    var e = {
                        game: CORE.game,
                        id: PLAYER.id,
                        u: $("#signup_username").val(),
                        p: $("#signup_password").val()
                    };
                    $.getJSON("//www.table-games-online.com/api-account?method=signup-player&" + $.param(e), function (t) {
                        if ("error" == t.status) trackEvent("signup", "error", t.msg + " : " + e.u), UI.enableButton($(".signup button")), DIALOGS.userMgmtError(t.msg); else {
                            if (trackEvent("signup", "set", PLAYER.id), t.logged_in_user) return PLAYER = JSON.parse(t.logged_in_user.player), savePlayerData(!1, !0), void window.location.reload();
                            PLAYER.username = $("#signup_username").val(), savePlayerData(!1), GAME.dispatchEvent("player_logged_in"), DIALOGS.hide()
                        }
                    })
                }
            }), $(".login button").on("click", function () {
                UI.disableButton($(this));
                var e = {game: CORE.game, id: PLAYER.id, u: $("#login_username").val(), p: $("#login_password").val()};
                $.getJSON("//www.table-games-online.com/api-account?method=login-player&" + $.param(e), function (t) {
                    "error" == t.status ? $.getJSON("//www.table-games-online.com/api-account?method=login&" + $.param(e), function (a) {
                        "error" == a.status ? (trackEvent("login", "error", t.msg + " : " + e.u), UI.enableButton($(".login button")), DIALOGS.userMgmtError(t.msg)) : window.location = window.location.pathname + "?mu=" + a.id
                    }) : "ok" == t.status ? (trackEvent("login", "joined", PLAYER.id), PLAYER.username = $("#login_username").val(), savePlayerData(!1), GAME.dispatchEvent("player_logged_in"), DIALOGS.hide()) : (trackEvent("login", "set", PLAYER.id), PLAYER = JSON.parse(t.player), savePlayerData(!1, !0), window.location.reload())
                })
            }), $(".forgot button").on("click", function () {
                UI.disableButton($(this));
                var e = {game: CORE.game, u: $("#forgot_username").val()};
                $.getJSON("//www.table-games-online.com/api-account?method=forgot-password&" + $.param(e), function (t) {
                    if ("error" == t.status) trackEvent("forgot", "error", t.msg + " : " + e.u), UI.enableButton($(".forgot button")), DIALOGS.userMgmtError(t.msg); else {
                        trackEvent("forgot", "set", PLAYER.id);
                        var a = $("<span>", {class: "hint"}).html("Password hint: <font>" + t.hint + "</font>");
                        $(".user_mgmt").css("padding-bottom", "60px").append(a), $(".user_mgmt > p").html("LOGIN"), $(".forgot").hide(), $(".login").show(), $("#login_username").focus()
                    }
                })
            }), DIALOGS.showBlocker($(".user_mgmt"))
        }, feedback: function () {
            trackEvent("feedback", "click", PLAYER.id), $(".feedback").css("top", $("footer").position().top - 560 + "px"), $(".feedback button").one("click", function () {
                trackEvent("feedback", "submit", PLAYER.id), UI.disableButton($(".feedback button"));
                var e = {
                    id: PLAYER.id,
                    game: CORE.game,
                    name: $("#feedback_name").val(),
                    email: $("#feedback_email").val(),
                    msg: $("#feedback_msg").val(),
                    player: PLAYER,
                    session: SESSION,
                    ua: navigator.userAgent
                };
                $.ajax({
                    url: "//www.table-games-online.com/api-account?method=send-feedback&game=" + CORE.game,
                    data: JSON.stringify(e),
                    contentType: "application/json",
                    type: "POST",
                    success: function (e) {
                        DIALOGS.hide(), $(".feedback input, .feedback textarea").val(""), UI.enableButton($(".feedback button"))
                    }
                })
            }), DIALOGS.showBlocker($(".feedback"))
        }, createPrivateTable: function () {
            $(".create_table button").one("click", function () {
                UI.disableButton($(".create_table button"));
                var e = {
                    id: PLAYER.id,
                    game: CORE.game,
                    host_name: $("#host_name").val(),
                    num_seats: $("#num_seats").val(),
                    init_buyin: $("#init_buyin").val(),
                    allow_rebuys: $("#allow_rebuy").prop("checked")
                };
                $.getJSON("//www.table-games-online.com/api-private-table?method=create&" + $.param(e), function (e) {
                    if (e) {
                        var t = (PRIVATE_TABLE = e).seats, a = 0;
                        for (var n in t) {
                            var i = t[n];
                            0 === i.table_position && (a = i.seat_id)
                        }
                        window.location.href = "?table_id=" + PRIVATE_TABLE.table_id + "&seat_id=" + a
                    }
                })
            }), DIALOGS.showBlocker($(".create_table"), !0)
        }, takeSeat: function (e) {
            $(".take_seat button").one("click", function () {
                UI.disableButton($(".take_seat button"));
                var t = $("#player_name").val(), a = {id: PLAYER.id, game: CORE.game, table_id: e, player_name: t};
                $.getJSON("//www.table-games-online.com/api-private-table?method=take-seat&" + $.param(a), function (e) {
                    if (e) {
                        PRIVATE_TABLE = e;
                        for (var a = 0, n = null; PRIVATE_TABLE["seat" + a];) {
                            var i = PRIVATE_TABLE["seat" + a];
                            if (i.name == t) {
                                n = i.seat_id;
                                break
                            }
                            a += 1
                        }
                        n ? window.location.href = "?table_id=" + PRIVATE_TABLE.table_id + "&seat_id=" + n : $(".take_seat .form").html("<h3 class='orange'>Sorry, no seats available.</h3>")
                    }
                })
            }), DIALOGS.showBlocker($(".take_seat"), !0)
        }, hide: function () {
            $(".blocker").off(isTouch() ? "touchstart.dialogCancel" : "mousedown.dialogCancel"), $("#reset, #submit_zip, .form button").off("click"), UI.fadeOut(DIALOGS._currentDialog, 0, !1, 300, function () {
                DIALOGS._currentDialog && (DIALOGS._currentDialog.css("display", "none"), DIALOGS._currentDialog = null), UI.fadeOut($(".blocker"), 0, !0, 300)
            })
        }, showBlocker: function (e, t) {
            var a = $("<div>", {class: "blocker"}).css({width: $(document).width(), height: $(document).height()});
            $("body").append(a), t || $(".blocker").on(isTouch() ? "touchstart.dialogCancel" : "mousedown.dialogCancel", function () {
                DIALOGS.hide()
            }), DIALOGS._currentDialog = e, setTimeout(function () {
                $(".blocker").css("opacity", .6)
            }, 1), e.css("display", "block"), UI.fadeIn(DIALOGS._currentDialog, 300)
        }, userMgmtError: function (e) {
            e ? ($(".user_mgmt").css("padding-bottom", "60px"), $(".user_mgmt > .error").text(e).show()) : ($(".user_mgmt").css("padding-bottom", "35px"), $(".user_mgmt > .error").hide())
        }
    }, SERVER = {
        sync: function (e, t) {
            if (SESSION.last_games_sync != PLAYER.total_games || e) {
                var a = {id: PLAYER.id, game: CORE.game, player: PLAYER};
                SESSION.jackpot_entries > 0 && (a.jackpot_entries = SESSION.jackpot_entries, SESSION.jackpot_entries = 0), $.ajax({
                    url: "//www.table-games-online.com/api-user?method=sync-player&game=" + CORE.game,
                    data: JSON.stringify(a),
                    contentType: "application/json",
                    type: "POST",
                    error: t,
                    success: function (e) {
                        "error" == e.status && e.msg && e.msg.retryable ? setTimeout(function () {
                            SERVER.sync(!0, t)
                        }, 15e3) : e && e.version && e.version != CORE.VERSION ? (trackEvent("version_reset", CORE.VERSION, PLAYER.id), location.reload(!0)) : void 0 !== t && t()
                    }
                }), SESSION.last_games_sync = PLAYER.total_games
            }
        }, getUser: function (e, t, a, n, i) {
            var o = {game: CORE.game, id: e};
            1 == t && (o.v2 = t), $.getJSON("//www.table-games-online.com/api-user?method=get-user&" + $.param(o), function (o) {
                "error" == o.status && o.msg && o.msg.retryable ? i ? n() : setTimeout(function () {
                    SERVER.getUser(e, t, a, n, !0)
                }, 1e3) : 1 != t || o.player ? o.player ? (PLAYER = JSON.parse(o.player), savePlayerData(!1, !0), a()) : n() : SERVER.getUser(e, 0, a, n)
            }).error(n)
        }, bigWin: function (e, t) {
            e < GAME.big_win_threshold || checkGeo(function () {
                var a = {game: CORE.game, id: PLAYER.id, l: PLAYER.location, n: t, v: e};
                PLAYER.location && "null" != PLAYER.location && "undefined" != PLAYER.location || trackEvent("debug", "big_win_no_location", PLAYER.id), $.ajax({
                    url: "//www.table-games-online.com/api-big-wins?method=big-win&" + jQuery.param(a),
                    cache: !1,
                    success: function (e) {
                        "error" == e.status && trackEvent("error", "big-win", PLAYER.id)
                    }
                })
            })
        }, pollRecentWinners: function (e) {
            var t = {id: PLAYER.id, game: CORE.game, adb_user: PLAYER.adb_user ? "yes" : "no", src: e + "_" + $.now()};
            $.getJSON("//www.table-games-online.com/api-big-wins?method=poll-recent-winners-and-online-count&" + $.param(t), function (e) {
                if (e && "error" != e.status) {
                    var t = 1;
                    (e.online_count || 0 === e.online_count) && (t = e.online_count, e = e.winners);
                    try {
                        localStorage.setItem(CORE.game + ".winners", JSON.stringify({
                            online_count: t,
                            retrieved_at: $.now(),
                            data: e
                        }))
                    } catch (e) {
                    }
                    UI.setWinners(e), UI.setOnlineCount(t)
                }
            })
        }, jackpotWin: function (e, t) {
            var a = {game: CORE.game, id: PLAYER.id, v: e};
            $.ajax({
                url: "//www.table-games-online.com/api-jackpot?method=jackpot-win&" + jQuery.param(a),
                cache: !1,
                error: t,
                success: t
            })
        }, pollJackpot: function () {
            var e = {game: CORE.game};
            $.getJSON("//www.table-games-online.com/api-jackpot?method=poll-jackpot&" + $.param(e), function (e) {
                if (!isNaN(e.jackpot) && !isNaN(e.entries)) {
                    var t = parseInt(e.entries, 10);
                    if (0 === JACKPOT.entries || t < JACKPOT.entries) JACKPOT.rate_per_sec = (1.3 + 2.5 * Math.random()) / 60; else {
                        var a = .72 * (t - JACKPOT.entries);
                        JACKPOT.rate_per_sec = a / Math.max(moment().diff(JACKPOT.last_sync, "seconds"), 1)
                    }
                    JACKPOT.entries = t, JACKPOT.last_sync = (new Date).getTime(), JACKPOT.total = parseFloat(e.jackpot), JACKPOT.total -= 60 * JACKPOT.rate_per_sec, JACKPOT.jackpot_time_id && clearInterval(JACKPOT.jackpot_time_id), JACKPOT.rate_per_sec > 0 && (UI.incrementJackpot(), JACKPOT.jackpot_time_id = setInterval(UI.incrementJackpot, 1e3))
                }
            })
        }, migrateUser: function (e) {
            var t = {id: PLAYER.id, game: CORE.game, u: e};
            $.getJSON("//www.table-games-online.com/api-account?method=migrate-player&" + $.param(t), function (e) {
                e && ("error" != e.status ? trackEvent("debug", "player_migrated", JSON.stringify(t)) : trackEvent("debug", "player_migrate_error", JSON.stringify(t)))
            })
        }, _updatePrivateTable: function (e) {
            PRIVATE_TABLE && PRIVATE_TABLE.table_version ? PRIVATE_TABLE.table_version < e.table_version ? (PRIVATE_TABLE = e, GAME.dispatchEvent("private_game_update")) : console.log("NO CHANGE TO TABLE") : (PRIVATE_TABLE = e, GAME.dispatchEvent("private_game_update"))
        }, checkWebsocket: function () {
            GAME.webSocket && GAME.webSocket.readyState != WebSocket.CLOSED || (GAME.webSocket = new WebSocket("wss://bf8o3ci2vj.execute-api.us-east-1.amazonaws.com/prod?table_id=" + GAME.table_id + "&seat_id=" + GAME.seat_id), GAME.webSocket.onopen = function (e) {
                console.log("[websocket opened] - " + (new Date).toString())
            }, GAME.webSocket.onmessage = function (e) {
                var t = JSON.parse(e.data);
                t.message && "update" == t.message && (console.log("[player update]", t.private_table), SERVER._updatePrivateTable(t.private_table))
            }, GAME.webSocket.onclose = function (e) {
                e.wasClean ? console.log("[websocket closed] Connection closed cleanly, reason=" + e.reason + " - " + (new Date).toString()) : console.log("[websocket closed] Connection died")
            }, GAME.webSocket.onerror = function (e) {
                console.log("[websocket error] " + e.message)
            })
        }, checkSeat: function (e, t, a, n) {
            var i = {game: CORE.game, table_id: e, seat_id: t};
            $.getJSON("//www.table-games-online.com/api-private-table?method=status&" + $.param(i), function (e) {
                e && (e.seats[t] ? a(e) : n())
            })
        }, getTableStatus: function () {
            var e = {game: CORE.game, table_id: GAME.table_id};
            $.getJSON("//www.table-games-online.com/api-private-table?method=status&" + $.param(e), function (e) {
                e && SERVER._updatePrivateTable(e)
            })
        }, setSeatStatus: function (e) {
            var t = {game: CORE.game, table_id: GAME.table_id, seat_id: GAME.seat_id, status: e};
            $.getJSON("//www.table-games-online.com/api-private-table?method=set-seat-status&" + $.param(t), function (e) {
                e && SERVER._updatePrivateTable(e)
            })
        }, dealSeat: function (e, t, a) {
            var n = {game: CORE.game, table_id: GAME.table_id, seat_id: GAME.seat_id, trips: e, ante: t};
            $.getJSON("//www.table-games-online.com/api-private-table?method=deal-seat&" + $.param(n), function (e) {
                a(), e && SERVER._updatePrivateTable(e)
            })
        }, betSeat: function (e, t, a) {
            var n = {game: CORE.game, table_id: GAME.table_id, seat_id: GAME.seat_id, multiplier: e, bet_status: t};
            $.getJSON("//www.table-games-online.com/api-private-table?method=bet-seat&" + $.param(n), function (e) {
                a(), e && SERVER._updatePrivateTable(e)
            })
        }, sendResults: function (e, t, a) {
            var n = {game: CORE.game, table_id: GAME.table_id, seat_id: GAME.seat_id, bankroll: e, winnings: t, hand: a};
            $.getJSON("//www.table-games-online.com/api-private-table?method=send-results&" + $.param(n), function (e) {
                e && SERVER._updatePrivateTable(e)
            })
        }, reBuy: function (e) {
            var t = {game: CORE.game, table_id: GAME.table_id, seat_id: GAME.seat_id, amount: e};
            $.getJSON("//www.table-games-online.com/api-private-table?method=rebuy&" + $.param(t), function (e) {
                e && SERVER._updatePrivateTable(e)
            })
        }, resetPrivateTable: function (e) {
            var t = {game: CORE.game, table_id: GAME.table_id, keep_bankrolls: e};
            $.getJSON("//www.table-games-online.com/api-private-table?method=reset&" + $.param(t), function (e) {
                e && SERVER._updatePrivateTable(e)
            })
        }
    }, CONTROLLER = {
        init: function () {
            GAME.addEventListener("ready", CONTROLLER._onPageReady), GAME.addEventListener("player_loaded", CONTROLLER._onPlayerLoaded), GAME.addEventListener("player_updated", CONTROLLER._onPlayerUpdated), GAME.addEventListener("player_logged_in", CONTROLLER._onPlayerLogin), GAME.addEventListener("game_result", CONTROLLER._onGameResult, -1), GAME.addEventListener("private_game_result", CONTROLLER._onPrivateGameResult, -1), GAME.addEventListener("private_table_loaded", CONTROLLER._onPrivateTableLoaded), GAME.addEventListener("private_game_update", CONTROLLER._onPrivateGameUpdate)
        }, _onPageReady: function () {
            $("button").on("touchstart mousedown", function () {
                $(this).hasClass("disabled") || $(this).addClass("button_press")
            }), $("button").on("touchend mouseup", function () {
                $(this).hasClass("disabled") || setTimeout(function () {
                    $("button").removeClass("button_press")
                }, 25)
            }), $.each($(".betting_circle_label, .betting_circle_label_two, .betting_circle_bonus_label"), function (e, t) {
                var a = $(t).text();
                $(t).empty();
                for (var n = 0; n < a.length; n++) $(t).append($("<span>", {class: "char" + n}).text(a[n]))
            });
            var e = function (e) {
                return $("#more_games_link").hide(), $(".more_games_dropdown").removeClass("expanded"), setTimeout(function () {
                    $(".more_games_dropdown").remove(), $("#more_games_link").text("More Games").show()
                }, 300), e.target.hostname != location.hostname || e.target.pathname != location.pathname
            };
            $("#more_games_link").on("click", function (t) {
                $(this);
                if (0 === $(".more_games_dropdown").length) {
                    for (var a = $("<div>", {class: "more_games_dropdown"}), n = $(".more_games a"), i = 0; i < n.length; i++) a.append($(n[i]).clone().on("click", e));
                    a.append($("<a>", {
                        href: "#",
                        class: "cancel"
                    }).text("Cancel").on("click", e)), $(".content").append(a), $("#more_games_link").hide(), setTimeout(function () {
                        $(".more_games_dropdown").addClass("expanded"), $("#more_games_link").text("Cancel").show()
                    }, 100)
                } else e(t);
                return !1
            }), STATS_TRAY.init(), DIALOGS.init()
        }, _onPlayerLoaded: function () {
            if (isIE() && $("body").addClass("ie"), 0 === PLAYER.total_games) {
                var e = $("<div>", {class: "icon-start_here"});
                $(".deal").append(e), e.hide().delay(500).fadeIn(2e3)
            }
            1 == PLAYER.days_played && $("#stats").addClass("today_only"), $(".settings .checkbox").on("click", function () {
                $(this).children("input").prop("checked", !$(this).children("input").is(":checked")), "advice_setting" == this.id ? UI.toggleAdvice() : UI.toggleSound()
            }), GAME.onTotalGames(1, function () {
                !0 === SOUND.ready && $("#sound_setting").show()
            }), CONTROLLER._onPlayerUpdated(), $(".bonus_payouts, .stats_tray, #more_stats").removeClass("loading"), STATS.checkDailyRollover(), $("#deal").one("click", firstDeal), $(".button_bar button[id!=deal]").on("click.firstPlay", firstPlay), $("[type='number']").keyup(function (e) {
                UI.adjustBetInputSize($(this))
            }), ga("send", "timing", "load", "game", (new Date).getTime() - SESSION.start_time, PLAYER.id + ""), UI.enableButton($(".primary"))
        }, _onPrivateTableLoaded: function () {
            $(".settings .checkbox").on("click", function () {
                $(this).children("input").prop("checked", !$(this).children("input").is(":checked")), "advice_setting" == this.id ? UI.toggleAdvice() : "sitting_out_setting" == this.id ? UI.toggleSittingOut() : UI.toggleSound()
            }), PRIVATE_TABLE.allow_rebuys ? $("#reset_money").html("<a>Rebuy</a>") : $("#reset_money").remove(), $(".settings").addClass("private_table_settings"), $("#sitting_out_setting").show(), $(".stats_tray").addClass("private_table_tray"), $(".stats_tray .close").hide(), $(".user_mgmt_links").remove(), $("header").addClass("private_table_header"), $("#achievements").hide(), $("#private_table_players").show(), $("#achievements_tab").text("PLAYERS"), $(".invite_msg").show(), $("#deal").one("click", function () {
                $(".invite_msg").remove()
            });
            for (var e = 1; e <= 5; e++) e == Object.keys(PRIVATE_TABLE.seats).length ? $("#seat" + e + " > .achievement_name").addClass("last_achievement") : e > Object.keys(PRIVATE_TABLE.seats).length && $("#seat" + e).hide();
            $("#private_table_players").css("height", 60 + 110 * Object.keys(PRIVATE_TABLE.seats).length + "px"), PLAYER.bank_roll = PRIVATE_TABLE["seat" + PRIVATE_TABLE.seats[GAME.seat_id].table_position].bankroll, UI.setBankroll(PLAYER.bank_roll);
            for (var t in PRIVATE_TABLE.seats) {
                var a = "seat" + PRIVATE_TABLE.seats[t].table_position;
                if ("waiting_to_join" == PRIVATE_TABLE[a].status) {
                    $(".more_games_links").text("INVITE LINK:").addClass("yellow").show(), $("header").append('<input type="text" class="invite_link"/>'), $(".invite_link").val(document.location.origin + document.location.pathname + "?join_table=" + GAME.table_id);
                    break
                }
            }
            $("#sound_setting").show(), $(".bonus_payouts, .stats_tray, #more_stats, .private_table_leaderboard").removeClass("loading"), $("[type='number']").keyup(function (e) {
                UI.adjustBetInputSize($(this))
            }), STATS_TRAY.setStatsDisplay("private_table_players"), STATS_TRAY.setSidebarDisplay("stats"), STATS_TRAY.showAchievements(), UI.enableButton($(".primary"))
        }, _onPrivateGameUpdate: function () {
            PLAYER.bank_roll = PRIVATE_TABLE["seat" + PRIVATE_TABLE.seats[GAME.seat_id].table_position].bankroll, UI.setBankroll(PLAYER.bank_roll), SERVER.checkWebsocket()
        }, _onPlayerUpdated: function () {
            PLAYER.location ? ($("#location").text(PLAYER.location), $(".location_area").show()) : $(".location_area").hide(), STATS_TRAY.setStatsDisplay(PLAYER.stats_display), STATS_TRAY.setSidebarDisplay(PLAYER.sidebar_display), STATS_TRAY.showAchievements(), $("#sound").prop("checked", 1 == PLAYER.sound_enabled), $("#advice").prop("checked", 1 == PLAYER.advice_enabled)
        }, _onGameResult: function () {
            if (GAME.winnings > 0 && play_sound("win"), ga("send", "pageview", "/game/" + SESSION.game_count), GAME.big_win_value >= GAME.big_win_threshold && (SERVER.bigWin(GAME.big_win_value, GAME.winnings), trackEvent("big_hand", GAME.big_win_value, PLAYER.id), setTimeout(function () {
                SERVER.pollRecentWinners("big_hand")
            }, 3e3)), GAME.winnings > 0) {
                var e = $("<div>", {class: "plus_one"}).text("+ " + GAME.winnings);
                $("#bankroll").prepend(e), setTimeout(function () {
                    e.remove()
                }, 2e3)
            }
            DIALOGS.payouts()
        }, _onPrivateGameResult: function () {
            if (GAME.winnings > 0 && play_sound("win"), GAME.winnings > 0) {
                var e = $("<div>", {class: "plus_one"}).text("+ " + GAME.winnings);
                $("#bankroll").prepend(e), setTimeout(function () {
                    e.remove()
                }, 2e3)
            }
            DIALOGS.payouts()
        }, _onPlayerLogin: function () {
            $(".user_mgmt_links").remove();
            var e = $("<span>", {id: "welcome"}).text(PLAYER.username),
                t = $("<a>", {id: "logout_link", href: "#"}).text("Logout").one("click", logout);
            $("header").append(e.append(t))
        }
    };
init();